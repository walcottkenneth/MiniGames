#include <iostream>
#include <cstdlib>
#include <ctime>
#include <unistd.h>
using namespace std;

#define TABLE_SIZE 10
#define TABLE_CHAR '#'
#define OPEN_CHAR '.'
#define BALL_CHAR '@'

void wait_sec(float x) {
    clock_t start = clock();
    while (float(clock() - start)/CLOCKS_PER_SEC < x)
        ; //Do nothing
}

struct vec3 {
    int x,y,z;
    vec3() { x = 0; y = 0; z = 0; }
    vec3(int new_x, int new_y, int new_z):x(new_x),y(new_y),z(new_z) {}

    //YOU: Write some operators
    void operator-= (const vec3& rhs) {
        x -= rhs.x;
        y -= rhs.y;
        z -= rhs.z;
    }
    vec3 operator+ (const vec3& rhs) const {
        return vec3(x+rhs.x,y+rhs.y,z+rhs.z);
    }
    vec3 operator- (const vec3& rhs) const {
        vec3 temp = *this;
        temp.x -= rhs.x;
        temp.y -= rhs.y;
        temp.z -= rhs.z;
        return temp;
    }
    void operator+= (const vec3& rhs) {
        x += rhs.x;
        y += rhs.y;
        z += rhs.z;
    }

    //YOU: Write a operator* that takes an integer, and scales the vector by that int
    vec3 operator* (int rhs) {
        return vec3(x*rhs,y*rhs,z*rhs);
    }

    friend ostream& operator<< (ostream& lhs, vec3 rhs);
};

ostream& operator<< (ostream& lhs, vec3 rhs) {
    lhs << "(" << rhs.x << "," << rhs.y << "," << rhs.z << ")\n";
}

class Ball {
    int ball_no;
    float weight;
    vec3 position;
    vec3 velocity;
     bool in_pocket;
    public:
    Ball() {
        ball_no = 0;
        weight = 0;
        //Not needed, but we could - position = {0,0,0};
        //Not needed, but we could - velocity = {0,0,0};
        in_pocket = false;
    }
    Ball (int new_ball_no, float new_weight, vec3 new_pos, vec3 new_vel) : ball_no(new_ball_no) {
        weight = new_weight;
        position = new_pos;
        velocity = new_vel;
        in_pocket = false;
    }

    char get_symbol() const {
        if (in_pocket) return 'X';
        if (ball_no != 0) return char(ball_no+'0');
        return BALL_CHAR;
    }

    //YOU: Modify this to check for collisions with other balls (Extra Credit)
    void update() {
        if (in_pocket) return;

        //Do Physics
        position += velocity;
        vec3 overshoot = vec3(1+abs(position.x)-TABLE_SIZE,1+abs(position.y)-TABLE_SIZE,1+abs(position.z)-TABLE_SIZE);
 //YOU: Modify this to go into a pocket at the table corners
        if (overshoot.x == 1 && overshoot.y == 1 || overshoot.x == 0 && overshoot.y == 0) {
            in_pocket = true;
            return;
        }

    //YOU: Fix it so it bounces more properly
        if (overshoot.x >= 0) {
            velocity.x *= -1; //Reverse course
            position.x = (abs(position.x) - 2*overshoot.x) * position.x/abs(position.x); //Crash if x == 0
        }
        if (overshoot.y >= 0) {
            velocity.y *= -1; //Reverse course
            position.y = (abs(position.y) - 2*overshoot.y) * position.y/abs(position.y); //Crash if y == 0
        }
        if (overshoot.z >= 0) {
            velocity.z *= -1; //Reverse course
            position.z = (abs(position.z) - 2*overshoot.z) * position.z/abs(position.z); //Crash if z == 0
        }
    }
    friend ostream& operator<<(ostream& outs, const Ball& rhs);
    friend void print_table(const Ball& rhs);
};

ostream& operator<<(ostream& outs, const Ball& rhs) {
    cout << "Ball " << rhs.ball_no << " is at: " << rhs.position.x << "," << rhs.position.y << "," << rhs.position.z << endl;
}

//YOU: Modify this to take multiple balls, like maybe in an array or something
//YOU: Print the balls based on their number, instead
void print_table(const Ball &rhs) {
    for (int i = -1 * TABLE_SIZE; i <= TABLE_SIZE; i++) {
        for (int j = -1 * TABLE_SIZE; j <= TABLE_SIZE; j++) {
            //YOU: Fix the bug here
            if (rhs.position.x == i && rhs.position.y == j)
                cout << rhs.get_symbol();
            else if (i == -1 * TABLE_SIZE || i == TABLE_SIZE || j == -1 * TABLE_SIZE || j == TABLE_SIZE)
                cout << TABLE_CHAR;
            else
                cout << OPEN_CHAR;
        }
        cout << endl;
    }
}

int main() {
    //YOU: Modify this to accept multiple balls
    cout << "Please tell me where to drop your ball (x y z): ";
    int xp,yp,zp;
    //YOU: Modify this to check for valid input after each variable
    //You know, like: if (!cin) exit(EXIT_FAILURE);
    cin >> xp >> yp >> zp;
    //cout << (xp & ~yp) << endl;
    //Would this work? vec3 position = {xp,yp,zp};
    vec3 position(xp,yp,zp);
    cout << "Please tell me how fast your ball is moving (x y z): ";
    int xv,yv,zv;
    cin >> xv >> yv >> zv;
    vec3 velocity(xv,yv,zv);
    cout << "Please tell me how heavy your ball is: ";
 int weight;
    cin >> weight;
    cout << "Please tell me what number your ball is: ";
    int number;
    cin >> number;
    Ball my_ball(number,weight,position,velocity);

    cout << my_ball;
    cout << "Beginning simulation...\n";

    const int MAX_TICKS = 10000;
    for (int i = 0; i < MAX_TICKS; i++) {
        system("clear");
        my_ball.update();
        cout << my_ball;
        print_table(my_ball);
        cout << "Tick: " << i << endl;
        //wait_sec(.07);
        usleep(100000);
    }
}
